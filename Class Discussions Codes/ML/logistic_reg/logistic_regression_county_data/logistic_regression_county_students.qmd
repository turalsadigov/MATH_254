---
title: Logistic Regression - County data
author: Tural Sadigov
format: 
    html:
      theme: 
        light: united
        dark: darkly
      fig-width: 8
      fig-height: 6
title-block-banner: true
execute:
  echo: true
  warning: false
  message: false
  tidy: true
  eval: false
  output: true
  error: false
  freeze: true
  out.width: "100%"
  cache: true
code-fold: show
---


## libararies

```{r}
library(tidyverse)
library(tidymodels)
library(stats2data)
library(patchwork)
```


## county wrangling and EDA


```{r}
county %>% 
  ____

county %>% 
  select(metro, pop2017) %>% 
  drop_na() %>% 
  mutate(pop_dummy = ____) %>% 
  count(pop_dummy, metro) %>% 
  group_by(____) %>% 
  mutate(percent = n/sum(n))

county %>% 
  select(metro, median_hh_income) %>% 
  drop_na() %>% 
  mutate(income_dummy = ____) %>% 
  count(___, ___) %>% 
  group_by(income_dummy) %>% 
  mutate(percent = n/sum(n))


county %>% 
  select(metro, median_hh_income, pop2017) %>% 
  drop_na() %>% 
  mutate(income_dummy = ____,
         pop_dummy = ____) %>% 
  count(pop_dummy, income_dummy, metro) %>% 
  group_by(____, ____) %>% 
  mutate(percent = n/sum(n))
```


```{r}
skimr::skim(county)

df <- stats2data::county %>% 
  select(pop2017, median_hh_income, metro) %>% 
  mutate(metro = factor(metro)) %>% 
  drop_na()

skimr::skim(____)


p1 <- df %>% 
  ggplot(aes(x = metro, y = ____, , fill = ____)) +
  geom_boxplot() 

p2 <- df %>% 
  ggplot(aes(x = metro, y = ____, , fill = ___)) +
  geom_boxplot() 

library(patchwork)
p1+p2



p3 <- df %>% 
  ggplot(aes(x = metro, y = log(pop2017), fill = metro)) +
  ____

p4 <- df %>% 
  ggplot(aes(x = metro, y = log(median_hh_income),, fill = metro)) +
  ____

library(patchwork)
p3+p4


df %>% 
  GGally::____(aes(fill = ___))


df %>% 
  mutate(metro_dummy = ____) %>% 
  ggplot(aes(x = pop2017, y = metro_dummy)) +
  geom_point() +
  ____

df %>% 
  mutate(metro_dummy = ____) %>% 
  ggplot(aes(x = log(pop2017), y = metro_dummy)) +
  geom_point() +
  ____


df %>% 
  mutate(metro_dummy = ____) %>% 
  ggplot(aes(x = median_hh_income, y = metro_dummy)) +
  geom_point() +
  ____


```


## data split

```{r}

df <- df %>% 
  mutate(pop2017 = log(pop2017))
set.seed(2022)
df_split <- initial_split(data = df, 
                          prop = 0.80, 
                          strata = metro)
df_training <- ____(df_split)
df_testing <- ____(df_split)

set.seed(2023)
df_boot_resamples <-  ____

df_boot_resamples
```


## modeling

```{r}
logistic_spec <- 
  ____ %>% 
  set_engine(____) %>% 
  set_mode(____)

rec_null <- recipe(metro ~ ____, data = df_training)
rec_1 <- recipe(metro ~ ____, data = df_training) 
rec_2 <- recipe(metro ~ ____, data = df_training)
rec_3 <- recipe(metro ~ ____, data = df_training)
rec_4 <- recipe(metro ~ ____, data = df_training) %>% 
  step_interact(terms = ~ ____) 


model_null <- 
  ____ %>% 
  ____(logistic_spec) %>% 
  ____(rec_null) %>% 
  fit_resamples(df_boot_resamples)
  
model_1 <- 
  workflow() %>% 
  add_model(logistic_spec) %>% 
  add_recipe(rec_1) %>% 
  fit_resamples(df_boot_resamples)

model_2 <- 
  workflow() %>% 
  add_model(logistic_spec) %>% 
  add_recipe(rec_2) %>% 
  fit_resamples(df_boot_resamples)

model_3 <- 
  workflow() %>% 
  add_model(logistic_spec) %>% 
  add_recipe(rec_3) %>% 
  fit_resamples(df_boot_resamples)

model_4 <- 
  workflow() %>% 
  add_model(logistic_spec) %>% 
  add_recipe(rec_4) %>% 
  fit_resamples(df_boot_resamples)
```


## model comparison

```{r}
collect_metrics(____)
collect_metrics(____)
collect_metrics(____)
collect_metrics(____)
collect_metrics(____)
```

## CHOSEN ONE!

```{r}
chosen_model <- 
  ____ %>% 
  ____(logistic_spec) %>% 
  ____(rec_3) %>% 
  ____(df_split)
chosen_model


demo_model <- 
  ____ %>% 
  ____(logistic_spec) %>% 
  ____(rec_1) %>% 
  ____(df_split)
```

## mathematical model

```{r}
extract_fit_engine(chosen_model) %>% 
  tidy()

collect_metrics(chosen_model) 

____(chosen_model)

collect_predictions(chosen_model) %>% 
  ____(truth = metro, estimate = .pred_class)

collect_predictions(chosen_model) %>% 
  ____(truth = metro, estimate = .pred_class)

## demo model
extract_fit_engine(demo_model) %>% 
  tidy()
collect_metrics(demo_model) 
```

## sketch 2D curves

```{r}
df_testing_results <- 
  collect_predictions(chosen_model) %>% 
  ____(metro_dummy = if_else(metro == 'yes', 1, 0),
            .pred_yes) %>% 
  bind_cols(df_testing)


p6 <- df_testing_results %>% 
  ggplot(aes(log(pop2017))) +
  geom_point(aes(y = metro_dummy)) +
  geom_line(aes(y = .pred_yes))

p7 <- df_testing_results %>% 
  ggplot(aes(median_hh_income)) +
  geom_point(aes(y = metro_dummy)) +
  geom_line(aes(y = .pred_yes))

p6 + p7


## demo results

demo_testing_results <- 
  collect_predictions(demo_model) %>% 
  transmute(metro_dummy = if_else(metro == 'yes', 1, 0),
            .pred_yes) %>% 
  bind_cols(df_testing)

demo_testing_results %>% 
  ggplot(aes(log(pop2017))) +
  geom_point(aes(y = metro_dummy)) +
  geom_line(aes(y = .pred_yes))
```



```{r}
library(____)

fig <- plot_ly(df_testing_results, 
               x = ~pop2017, 
               y = ~median_hh_income, 
               z = ~.pred_yes)
fig <- fig %>% add_markers()

fig

```


## sketch 3D probability surface with labels colored


```{r}
fig2 <- plot_ly(df_testing_results, 
               x = ~pop2017, 
               y = ~median_hh_income, 
               z = ~.pred_yes, 
               color = ~metro, 
               colors = c('#BF382A', '#0C4B8E'))
fig2 <- fig2 %>% add_markers()

fig2
```


## decision boundary in 2D

```{r}
b <- extract_fit_engine(chosen_model) %>% 
  tidy() %>% 
  ____

slope <- - b[2]/b[3]
intercept <- -b[1]/b[3]

df_testing %>% 
  ggplot(aes(x = ____, y = ____)) +
  geom_point(aes(color = metro)) +
  geom_abline(slope = slope, intercept = intercept)

```



## save model for deployment

```{r}
___(____, file = 'county_logistic_model.Rdata')
```

